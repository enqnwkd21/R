# 2. 비계층적 군집분석
# - 순차적으로 거리가 가까운 포인트끼리 군집을 형성하다가
# - 군집의 이동으로 인해 소속 군집이 달라지는 경우 이동
# - 평가 메트릭 존재(그룹간 분산/그룹내 분산)
# - 주로 군집의 수를 알 때 정해진 군집으로 나누기 위해 수행

# 군집분석에서의 분산
# 1. 총분산(total_SS)
# - 전체 데이터의 분산
# - 항상 일정(클러스터링 결과에 따라 달라지지 않음)

# 2. 그룹 내 분산(within_SS)
# - 각 클러스터의 중심으로부터 해당 클러스터에 소속된 데이터들의 흩어진 정도
# - 좋은 군집분석 결과일스록 작다

# 3. 그룹 간 분산(between_SS)
# - 각 클러스터의 중심이 전체 중심으로부터 흩어진 정도
# - 좋은 군집분석 결과일수록 크다

# total_SS = within_SS + between_SS

# 그룹내분산(within_SS) / 그룹간분산(between_SS) : 작을수록 좋다
# 그룹간분산(between_SS) / 그룹내분산(within_SS) : 클수록 좋다

# iris data를 사용한 비계층적 군집분석 수행(k-means)
# 1. clustering
kmeans(x,              # raw data
       centers = )     # 군집의 수

m1 <- kmeans(iris[,-5], centers = 3)

m1
# ===================================================== #
# K-means clustering with 3 clusters of sizes 62, 38, 50
# 
# Cluster means:
#   Sepal.Length Sepal.Width Petal.Length Petal.Width
# 1     5.901613    2.748387     4.393548    1.433871
# 2     6.850000    3.073684     5.742105    2.071053
# 3     5.006000    3.428000     1.462000    0.246000
# 
# Clustering vector:
#   [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1 1 2 1 1 1 1 1 1 1
# [61] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 2 2 1 2 2 2 2 2 2 1 1 2 2 2 2 1
# [121] 2 1 2 1 2 2 1 1 2 2 2 2 2 1 2 2 2 2 1 2 2 2 1 2 2 2 1 2 2 1
# 
# Within cluster sum of squares by cluster:
#   [1] 39.82097 23.87947 15.15100
# (between_SS / total_SS =  88.4 %)
# 
# Available components:
#   
#   [1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss" "betweenss"    "size"         "iter"        
# [9] "ifault"      
# ===================================================== #

m1$withinss       # 39.82097 23.87947 15.15100
m1$tot.withinss   # 위 총합(78.85144)

m1$betweenss      # 602.5192
m1$totss          # 681.3706 = 602.5192 + 78.85144


# [ k-mean를 사용한 iris data의 군집 분석 시 적절한 k의 수를 찾기 ]
vscore1 <- c() ; vscore2 <- c()

for (i in 2:10) {
  km <- kmeans(scale(iris[,3:4]), i)
  vscore1 <- c(vscore1, km$betweenss / km$totss * 100)
  vscore2 <- c(vscore2, km$tot.withinss / km$totss * 100)
}

dev.new()
par(mfrow=c(1,2))
plot(2:10, vscore1, type = 'o', xlab = 'number of clusters', ylab = 'betweenss/totss')
plot(2:10, vscore2, type = 'o', xlab = 'number of clusters', ylab = 'withinss/totss')


# k-means 군집 분석 과정
# 1. 사용자가 직접 지정한 군집의 수 만큼 초기 seed 할당
#    (k=3이면 랜덤하게 3개 포인트 결정)
# 2. 초기 군집으로부터 가장 가까운 데이터포인트를 각 군집에 소속
# 3. 이동된 군집의 중심(seed)으로부터 모든 관측치와의 거리를 계산
#    (군집에 속하지 않은 데이터뿐 아니라 군집에 이미 속한 데이터까지도 계산)
# 4. 2번과 3번을 반복
#    (이 과정에서 이동된 중심 기준으로 더 가깝다는 판단이 들면 이미 다른 군집에 소속된
#     관측치를 해당 군집에 이동 시킴)
# 5. 더이상 각 군집의 중심의 변화가 없을때까지 반복!!
#   


